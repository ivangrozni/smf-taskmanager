#+TITLE: Handout za Delegator delavnico
#+OPTIONS: toc :3

* Uvod
* PHP osnove
** Splošno
    - dokaj C-jevska sintaksa (sicer enostavnejša)
    - .php datoteko začnemo s <?php tagom, opcionalno zaključimo z ?>

      #+BEGIN_SRC php
      <?php
            program;
            in_to;
      ?>
      #+END_SRC

    - { } za definicije blokov (funkcij, teles kontrolnih struktur...)
    - ; konec stavkov
      
      #+BEGIN_SRC php
      klic_funkcije();
      #+END_SRC

    - Komentarji

      #+BEGIN_SRC php
      koda; // Enovrstični komentar
      /*
          večvrstični
          komentar
      */
      #+END_SRC

    - include "imedatoteke.php";

      Include vključi (požene) kodo iz poljubne datoteke

    - Konfiguracija v php.ini
    - Obstaja zelo veliko modulov
** Podatkovne strukture
*** Skalarni tip (spremenljvika z eno vrednostjo)

     #+BEGIN_SRC php
     $spremenljivka = "vrednost";
     #+END_SRC

     #+BEGIN_SRC php
     echo($spremenljivka); // "vrednost"
     #+END_SRC

**** Tipi skalarjev
      - Besedilo (string)

        #+BEGIN_SRC php
        'Dobeseden tekst', "Tekst s spremenljivko: $stevilo"
        #+END_SRC

      - Število (integer) - celo število

        #+BEGIN_SRC php
        0, 42, -123 ...
        #+END_SRC

      - Decimalno število (float)

        #+BEGIN_SRC php
        0.5, -12.952 ...
        #+END_SRC

      - Binarna vrednost (boolean)

        #+BEGIN_SRC php
        true / false
        #+END_SRC

      - Ničelna vrednost

        #+BEGIN_SRC php
        null
        #+END_SRC
        
      - V skalar lahko tudi shranimo funkcijo

        #+BEGIN_SRC php
        $opravilo = function() {
            izvedi;
        }
        $opravilo();
        #+END_SRC
*** Konstante
     - nespremenljive

       #+BEGIN_SRC php
       define("IMEKONSTANTE", vrednost);
       echo(IMEKONSTANTE); // vrednost
       #+END_SRC
*** Polje (array)
    - Vsebuje zaporeden seznam vrednosti kateregakoli tipa (kot pri skalarjih)
    - Dostop do elementov z zaporednim številom, začenši z 0

      #+BEGIN_SRC php
      $polje = [1, "dva", 3];
      $polje = array(1, "dva", 3);
      echo($polje[1]); // 1
      echo($polje[2]); // "dva"
      #+END_SRC
*** Asociativno polje (associative array)
     - Seznam vrednosti, indeksiran z vrednostmi kateregakoli tipa

     #+BEGIN_SRC php
     $asociativno_polje = array(
           "kljuc" => "vrednost!",
           1001 => true
     );
     $asociativno_polje = [
           "kljuc" => "vrednost!",
           1001 => true
     ];
     echo($asociativno_polje["kljuc"]); // "vrednost!"
     echo($asociativno_polje[1001]); // true
     #+END_SRC

*** Posebne spremenljivke
    - $_GET

      Vsebuje asociativno polje parametrov, podanih preko naslova.

      Primer:http://stran.domena.si/skripta.php?stran=1&objekt=streha
      #+BEGIN_SRC php
      [
          "stran" => "1",
          "objekt" => "streha"
      ]
      #+END_SRC

    - $_POST

      Vsebuje POST podatke, ki se pošljejo kadar oddamo obrazec (form), pri
      nalaganju datotek itd.

    - $_SERVER

      Seznam raznih podatkov o strežniku

    - $_REQUEST

      Seznam podatkov oddanega obrazca (najdemo jih tudi v POST, ampak so tam
      lahko še kakšni drugi)

    - $_SESSION

      Vsebuje seznam vrednosti seje (session), ki služi ohranjanju istih
      podatkov posameznega uporabnika, med večimi zahtevki
      
    - $_ENV

      Okoljske spremenljivke sistema (če je omogočeno v konfiguraciji)
      
    - $_COOKIE

      Podatki piškotka uporabnika. Piškotki so malo podobni seji, vendar se
      njihovi podatki ne hranji na strežniku, temveč v brskalniku uporabnika
      samega

    - $_FILES

      Asociativno polje, ki vsebuje datoteke, naložene s POST zahtevkom

** Operatorji
*** Aritmetični
    #+BEGIN_SRC php
    1 + 3  // 8
    1 - 1  // 0
    2 * 5  // 10
    8 / 4  // 2
    10 % 4 // 2
    2**3   // 8
    #+END_SRC

*** Določitveni
    #+BEGIN_SRC php
    $blah = "tekst";
    $st += 1;
    $test -= 4;
    $num *= 2;
    $N /= 3;
    $veliko %= 5;
    "eno" . " in " . " drugo" // "eno in drugo"
    $tekst = "Pozdravljen";
    $tekst .+ ", svet!"; // "Pozdravljen, svet!"
    #+END_SRC
     
*** Primerjalni
    #+BEGIN_SRC php
    1 == 2         // false
    null == 0      // true
    false == null  // true
    4 != 4         // false
    8 != "test"    // true
    2 <> 7         // true

    0 === null     // false
    null !== false // true

    6 < 7          // true
    9 > 27         // false

    3 >= 1         // false
    7 >= 5 + 2     // true
    #+END_SRC

*** Logiški
    #+BEGIN_SRC php
    1 && 0          // false
    false and false // true

    1 || 0          // true
    false or 0      // false

    true xor true   // false
    0 xor true      // true

    !true           // false
    #+END_SRC

** Kontrolne strukture
*** If stavki
     #+BEGIN_SRC php
     if (pogoj) posledica else drugaposledica;
     #+END_SRC

     #+BEGIN_SRC php
     if (pogoj) {
         posledica;
     } elseif (drugpogoj) {
         drugaposledica;
     } else {
         nekajtretjega;
     }
     #+END_SRC

     #+BEGIN_SRC php
     if (pogoj):
         razne;
         stvari;
     else:
         drugo;
     endif;
     #+END_SRC

*** While zanke
     #+BEGIN_SRC php
     while (pogoj) {
         ponavljaj;
     }
     #+END_SRC
     
     #+BEGIN_SRC php
     do {
         ponavljaj;
     } while (pogoj);
     #+END_SRC

     #+BEGIN_SRC php
     while (pogoj):
         ponavljaj;
     endwhile;
     #+END_SRC

*** For zanke
     #+BEGIN_SRC php
     for ($i = 0; $i < 3; $i++) {
         ponovi;     // Ponovi 3x
     }
     #+END_SRC

     #+BEGIN_SRC php
     $stevec = [1, 2, 3, 4];
     foreach ($stevec as $stevilo) {
         echo("$stevilo!\n");
     }
     #+END_SRC

     #+BEGIN_SRC php
     $polje = [
         "kljuc" => "vrednost",
         "drugo" => "tretje"
     ];
     foreach ($polje as $kljuc => $vrednost) {
         echo("vrednost " . $kljuc . ": " . $vrednost . "\n");
     }
     #+END_SRC

*** Switch stavek
    - Podoben if / elseif / else, ampak nekoliko berljivejši

    #+BEGIN_SRC php
    switch ($spremenljivka) {
        case 1:
            narediNekaj();
            break;
        case "drugo":
            drug_primer();
            break;
        default:
            privzeto();
    }
    #+END_SRC

** Funkcije
     #+BEGIN_SRC php
     function imeFunkcije ($argument, &$referencniArgument) {
         telo_funkcije;
         $vrednost = "primer";
         return $vrednost;
     }
     #+END_SRC

     #+BEGIN_SRC php
     function sestej ($prvo, $drugo, $neobvezno = 0) {
         return $prvo + $drugo + 2;
     }
     sestej(2, 3);    // Vrne 7
     sestej(2, 3, 5); // Vrne 12
     #+END_SRC

** Seznam primerov raznih PHP funkcij
 - [[http://php.net/manual/en/function.substr.php][Povezava do seznama
   funkcij]]

 - implode($veznik, $polje)

   Združi elemente polja z znakom $veznik

   #+BEGIN_SRC php
   $polje = ["Janez", "Marija", "Ana", "Zdravko"];
   echo(implode(", ", $polje));   // "Janez, Marija, Ana, Zdravko"
   #+END_SRC

 - explode($locilo, $niz[, $meja])

   Razstavi niz znakov v polje elementov, ki so med seboj ločeni z
   znakom/znaki $locilo. Število elementov lahko po želji omejimo z $meja

   #+BEGIN_SRC php
   $niz = "Kadar spimo|Lep dan|tretje";
   echo(explode("|", $niz, 2));   // ["Kadar spimo", "Lep dan|tretje"]
   #+END_SRC

 - strpos($niz, $iskano[, $zamik])

   Poišče prvo pojavitev znaka/niza $iskano v znakovnem nizu $niz, lahko pa
   tudi podamo zanim, po katerem začne iskati.

 - strtoupper($niz)

   Spremeni niz v velike črke

 - strtolower($niz)

   Spremeni niz v male črke

 - count($spremenljivka)

   Vrne dolžino za vrednost $spremenljivka. Če gre za niz, vrne število
   znakov, pri polju pa število elementov

 - substr($niz, $zacetek[, $dolzina])

   Vrne podniz zankovnega niza $niz, od položaja $zacetek do konca, če pa
   podamo $dolzina, pa le toliko znakov

 - die([$sporocilo]);

   Končaj izvajanje programa, kjer je to klicano. Lahko podamo tudi
   sporočilo, ki se izpiše pred izhodom

* git

Git je sistem za nadzor nad verzijami projekta. In seveda še mnogo več. Med drugim je tudi izjemno orodje za sodelovanje.

 - [[https://www.atlassian.com/git/][git tutorial]]

 - [[http://git-scm.com/download/guis][GUIclients]]

** Začetni ukazi
   - ~git init~ :: ustvari nov git repository (git arhiv)
   - ~git clone <repo>~ :: kopira obstoječ git arhiv
   - ~git config~ :: podatki uporabnika
 
*** Shranjevanje
   - ~git add <datoteke>~ :: dodajanje datotek, ki bodo vključene v naslednji commit (verzija)
   - ~git commit -m "<komentar>"~ :: zapiše izbrane spremembe v zgodovino projekta - ta zgodovina je shranjena lokalno
        
*** Pregledovanje arhiva
   - ~git status~ :: prikaže stanje v delovni mapi in spremembe v njej
   - ~git log~ :: prikaže zgodovino projekta

   - ~git checkout~ :: 3 načini uporabe
     + ~git checkout <ime_veje>~ :: pojdi v vejo
     + ~git checkout <commit> <ime_datoteke>~ :: poglej prejšno verzije datoteke
     + ~git checkout <commit>~ :: Posodobi vse datoteke, da ustrezajo izbranemu komitu

#+begin_src ditaa :file dita-seqboxes0.png
/-------\     /-------\     /-------\    /-------\     /-------\          /-------\
|       |     |       |     |       |    |       |     |       |          |       |
| v1    +-----+ v2    +-----+ v3    +----+ v4    +-----+ v5    +----------+ v6    | 
\-------/     \-------/     \-------/    \-------/     \-------/          \-------/
#+end_src

*** Razveljavljanje sprememb /(ne znam)/
   - ~git checkout~ 
   - ~git revert~ 
   - ~git reset~ 
   - ~git clean~ 
   - ~git commit --amend~ 
   - ~git rebase~ 

** Sodelovanje
   Za skupno delo na projektu je potrebno dodati povezavo do oddaljenjega arhiva (remote). Ta lahko poteka preko HTTP(S)
   protokola ali ssh.
   - ~git remote~ :: ukaz za ustvarjanje, ogled in brisanje povezov do drugih arhivov
     + ~git remote -v~ :: prikaže povezave do drugih arhivov
     + ~git remote add <ime_povezave> <url>~ :: ustvari povezavo do oddaljenega arhiva
          Url je lahko ~http~ ali ~ssh~ povezava. Slednja ima prednost lažjega zapisovnja, al kaj.
     + ~git remote rm <ime_povezave>~ :: izbriše povezavo
     + ~git remote rename <staro_ime> <novo_ime>~ :: preimenuje povezavo
   - ~git fetch~ :: uvozi zgodovino commitov /(ne znam)/
*** Porivanje in vlečenje
   - ~git pull <remote>~ :: združi vodilne spremembe iz oddaljenega arhiva v lokalni/delovni arhiv
     + ~git pull --rebase~ :: združi spremembe iz oddaljenega arhiva glede na čas commitov 
   - ~git push <ime_povezave> <ime_veje>~ :: prenos lokalnih sprememb na oddaljen arhiv
#+begin_src ditaa :file dita-seqboxes1.png
             +-----------+
             | cBLU      |
             | Origin/m  |
             +----+------+
                  | 
                  | 
/-------\     /---+---\     /-------\    /-------\     /-------\
|       |     |       |     |       |    |       |     |       |
| v1    +-----+ v2    +-----+ v3    +----+ v4    +-----+ v5    | 
\-------/     \-------/     \-------/    \-------/     \---+---/
                                                           |
                                                           |
                                                      +----+------+
                                                      | cBLU      |
                                                      | m         |
                                                      +-----------+
#+end_src

#+begin_src ditaa :file dita-seqboxes2.png
                                                    +-----------+
                                                    | cBLU      |
                                                    | Origin/m  |
                                                    +------+----+
                                                           |
                                                           |
/-------\     /---+---\     /-------\    /-------\     /---+---\     
|       |     |       |     |       |    |       |     |       |
| v1    +-----+ v2    +-----+ v3    +----+ v4    +-----+ v5    |
\-------/     \-------/     \-------/    \-------/     \---+---/
                                                           |
                                                           |
                                                      +----+------+
                                                      | cBLU      |
                                                      | m         |
                                                      +-----------+
#+end_src

*** Veje
    So neodvisne razvojne linije projekta. Novi komiti so shranjeni v zgodovino trenutne veje. 
    - ~git branch~ :: ukaz lahko ustvari, prikaže, preimenuje in izbriše veje. Za preskakovanje med vejami se uporablja ~git checkout~.
      + ~git branch~ :: prikaže vse veje v arhivu
      + ~git branch <ime_veje>~ :: ustvari novo vejo, a se ne premakne v njo
      + ~git branch -d <ime_veje>~ :: izbriše vejo
      + ~git branch -m <novo_ime_veje>~ :: preimenuje trenutno vejo
    Veje so sestavni del gitovega razvojnega procesa. Spremembe na projektu se najprej naredi v stranskih vejah. Ko je koda v stranski
    veji stabilna, se jo lahko združi (merge-a) v glavno vejo. 
    - ~git checkout <ime_veje>~ :: odpre že obstoječo vejo (prej je morala biti ustvarjena z ~git branc~)
    - ~git checkout -b <ime_nove_veje>~ :: združi z ukazom za ustvarjanje nove veje
**** Združevanje (merge)
     Je način, kako nazaj združimo razdeljeno zgodovino. Vse spremembe se zapišejo v trenutno/izbrano vejo.
     - ~git merge <ime_veje>~ :: spremembe izbrane veje se zapišejo v trenutno vejo
     Če se v združevanih vejah niso urejale iste stvari, potem ne pride do konfliktov in veji se združita hitro. Ako pa so se spreminjale
     iste stvari v združevanih vejah, dobimo spore, ki jih je potrebno razrešiti. Dobimo *tro-vejno združevanje*, saj se za združevanje 
     uporabljajo trije komiti - vodilna komita iz vsake veje in njunega skupnega prednika.

#+begin_src ditaa :file dita-seqboxes3.png
/-------\     /-------\     /-------\    /-------\     /-------\          /-------\
|       |     |       |     |       |    |       |     |       |          |       |
| v1    +-----+ v2    +--+--+ v3    +----+ v4    +-----+ v5    +------+---+ v6    | 
\-------/     \-------/  |  \-------/    \-------/     \-------/      /   \-------/
                         \                                           /
                          \                                         /
                           \                                       /
                            |                                     /
                        /---+---\    /-------\                   /
                        |       |    |       |                  /
                        | newF1 +----+ newF2 +------------------+
                        \-------/    \-------/

#+end_src

*** Delovni proces
    1. koliniraš ali povlečeš projekt
    2. ustvariš novo vejo (zamisliš si neko funkcijo oz nek dodatek za k projektu)
    3. razvijaš novo vejo, dodajaš komite in potiskaš kodo v oddaljen arhiv
    4. ko si s kodo zadovoljen jo združiš z glavno vejo (pull request)
    5. spet povlečeš projekt, ustvariš novo vejo, itn.

    [[https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow][workflow tutorial]]


** Naloge
   - kloniraj projekt
   - 

* SMF
** Spremenljivke

    [[http://wiki.simplemachines.org/smf/Global_variables][SMF variable]]

    - ~$context~ (predmeti/spremenljivke za v predlogo)
    - ~$txt~ (prevodi)
    - ~$scripturl~
    - ~$settings~ (globalne nastavitve teme)
    - ~$sourcedir~ (absolutna pot do mape Sources)
    - ~$smcFunc~ (Funkcije)
      
** Seznam SMF funkcij

    [[http://dev.simplemachines.org/smcfunctions.php][SMF Funkcije]]

    Primer klica:
    ~$smcFunc['arugment'](parameter odvisen od arugmenta)~

    Argumenti za poizvedbe v bazo:
    - ~db_query~ (SQL poizvedba) - poizvedba v bazo ~SELECT~, ~SELECT COUNT()~, ~INSERT~, ~UPDATE~, ~DELETE~
      primer: 
      #+NAME: db_query
      #+BEGIN_SRC php 
     $request = $smcFunc['db_query']('', '
            SELECT id_proj FROM {db_prefix}tasks
            WHERE id = {int:id_task}', array('id_task' => $id_task) );
      #+END_SRC
    - ~db_insert~ (SQL poizvedba)
    - ~db_fetch_assoc~ (~$request~)
      primer:
      #+NAME: db_fetch_assoc
      #+BEGIN_SRC php 
     $row = $smcFunc['db_fetch_assoc']($request);
      #+END_SRC
    - ~db_free_results~ (~$request~) - narediš kar tako, da sprostiš nek spomin, al kaj
    - ~html_specialchars~ - (~string~) zaščita pred SQL injekcijami
    - ~html_trim~ - (~string~) zaščita pred SQL injekcijami

    Ostale funckije:
     - ~checkSession()~ - preveri, če je uporabnik pravi

** Struktura Moda

    datoteke:
    - ~package-info.xml~
    - ~modification.xml~
    - ~database.php~
    - ~Delegator.php~
    - ~Delegator.template.php~
    - ~delegator_helpers.php~    
    - ~delegator.js~
    - ~moment.min.js~
    - ~pikaday.css~    
    - ~pikaday.jquery.js~
    - ~pikaday.js~    

*** Povezave
     - [[http://www.simplemachines.org/community/index.php?topic=299670.0][modification.xml]]
     - [[http://www.simplemachines.org/community/index.php?topic=299669.0][package-info.xml]] 
     - [[http://wiki.simplemachines.org/smf/Coding_Guidelines][Smernice programiranja]]
     - [[http://wiki.simplemachines.org/smf/Customization_approval_guidelines][Smernice za kostumizacijo]]
