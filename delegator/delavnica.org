#+TITLE: Handout za Delegator delavnico
#+OPTIONS: toc :3

* Uvod
* git

Git je sistem za nadzor nad verzijami projekta. In seveda še mnogo več. Med drugim je tudi izjemno orodje za sodelovanje.
[[https://www.atlassian.com/git/][git tutorial]]

** Začetni ukazi
   - ~git init~ :: ustvari nov git repository (git arhiv)
   - ~git clone <repo>~ :: kopira obstoječ git arhiv
   - ~git config~ :: podatki uporabnika
 
*** Shranjevanje
   - ~git add <datoteke>~ :: dodajanje datotek, ki bodo vključene v naslednji commit (spremembo)
   - ~git commit <datoteke>~ :: zapiše izbrane spremembe v zgodovino projekta - ta zgodovina je shranjena lokalno

*** Pregledovanje arhiva
   - ~git status~ :: prikaže stanje v delovni mapi in spremembe v njej
   - ~git log~ :: prikaže zgodovino projekta
   - ~git checkout~ :: 3 načini uporabe
     + ~git checkout <ime_veje>~ :: pojdi v vejo
     + ~git checkout <commit> <ime_datoteke>~ :: poglej prejšno verzije datoteke
     + ~git checkout <commit~ :: Posodobi vse datoteke, da ustrezajo izbranemu komitu

*** Razveljavljanje sprememb /(ne znam)/
   - ~git checkout~ 
   - ~git revert~ 
   - ~git reset~ 
   - ~git clean~ 
   - ~git commit --amend~ 
   - ~git rebase~ 

** Sodelovanje
   - ~git remote~ :: ukaz za ustvarjanje, ogled in brisanje povezov do drugih arhivov
     + ~git remote -v~ :: prikaže povezave do drugih arhivov
     + ~git remote add <ime_povezave> <url>~ :: ustvari povezavo do oddaljenega arhiva
          Url je lahko ~http~ ali ~ssh~ povezava. Slednja ima prednost lažjega zapisovnja, al kaj.
     + ~git remote rm <ime_povezave>~ :: izbriše povezavo
     + ~git remote rename <staro_ime> <novo_ime>~ :: preimenuje povezavo
   - ~git fetch~ :: uvozi zgodovino commitov /(ne znam)/
*** Porivanje in vlečenje
   - ~git pull <remote>~ :: združi vodilne spremembe iz oddaljenega arhiva v lokalni/delovni arhiv
     + ~git pull --rebase~ :: združi spremembe iz oddaljenega arhiva glede na čas commitov 
   - ~git push <remote> <ime_veje>~ :: prenos lokalnih sprememb na oddaljen arhiv
#+begin_src ditaa :file dita-seqboxes1.png
             +-----------+
             | cBLU      |
             | Origin/m  |
             +-----------+
                  | 
                  | 
/-------\     /---+---\     /-------\    /-------\     /-------\
|       |     |       |     |       |    |       |     |       |
| v1    +-----| v2    +-----| v3    +----| v4    +-----| v5    | 
\-------/     \-------/     \-------/    \-------/     \---+---/
                                                           |
                                                           |
                                                      +----+------+
                                                      | cBLU      |
                                                      | m         |
                                                      +-----------+
#+end_src

#+begin_src ditaa :file dita-seqboxes2.png
                                                    +-----------+
                                                    | cBLU      |
                                                    | Origin/m  |
                                                    +------+----+
                                                           |
                                                           |
/-------\     /---+---\     /-------\    /-------\     /---+---\
|       |     |       |     |       |    |       |     |       |
| v1    +-----| v2    +-----| v3    +----| v4    +-----| v5    | 
\-------/     \-------/     \-------/    \-------/     \---+---/
                                                           |
                                                           |
                                                      +----+------+
                                                      | cBLU      |
                                                      | m         |
                                                      +-----------+
#+end_src

*** Veje
    So neodvisne razvojne linije projekta. Novi komiti so shranjeni v zgodovino trenutne veje. 
    - ~git branch~ :: ukaz lahko ustvari, prikaže, preimenuje in izbriše veje. Za preskakovanje med vejami se uporablja ~git checkout~.
      + ~git branch~ :: prikaže vse veje v arhivu
      + ~git branch <ime_veje>~ :: ustvari novo vejo, a se ne premakne v njo
      + ~git branch -d <ime_veje>~ :: izbriše vejo
      + ~git branch - <ime_veje>~ :: preimenuje trenutno vejo
    Veje so sestavni del gitovega razvojnega procesa. Spremembe na projektu se najprej naredi v stranskih vejah. Ko je koda v stranski
    veji stabilna, se jo lahko združi (merge-a) v glavno vejo. 
    - ~git checkout <ime_veje>~ :: odpre že obstoječo vejo (prej je morala biti ustvarjena z ~git branc~)
    - ~git checkout -b <ime_nove_veje>~ :: združi z ukazom za ustvarjanje nove veje
**** Združevanje (merge)
     Je način, kako nazaj združimo razdeljeno zgodovino. Vse spremembe se zapišejo v trenutno/izbrano vejo.
     - ~git merge <ime_veje>~ :: spremembe izbrane veje se zapišejo v trenutno vejo
     Če se v združevanih vejah niso urejale iste stvari, potem ne pride do konfliktov in veji se združita hitro. Ako pa so se spreminjale
     iste stvari v združevanih vejah, dobimo spore, ki jih je potrebno razrešiti. Dobimo *tro-vejno združevanje*, saj se za združevanje 
     uporabljajo trije komiti - vodilna komita iz vsake veje in njunega skupnega prednika.
*** Delovni proces
    1. koliniraš ali povlečeš projekt
    2. ustvariš novo vejo (zamisliš si neko funkcijo oz nek dodatek za k projektu)
    3. razvijaš novo vejo, dodajaš komite in potiskaš kodo v oddaljen arhiv
    4. ko si s kodo zadovoljen jo združiš z glavno vejo (pull request)
    5. spet povlečeš projekt, ustvariš novo vejo, itn.

    [[https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow][workflow tutorial]]

* PHP osnove
** Splošno
    - dokaj C-jevska sintaksa (sicer enostavnejša)
    - .php datoteko začnemo s <?php tagom, opcionalno zaključimo z ?>

      #+BEGIN_SRC php
      <?php
            program;
            in_to;
      ?>
      #+END_SRC

    - { } za definicije blokov (funkcij, teles kontrolnih struktur...)
    - ; konec stavkov
      
      #+BEGIN_SRC php
      klic_funkcije();
      #+END_SRC

    - Komentarji

      #+BEGIN_SRC php
      koda; // Enovrstični komentar
      /*
          večvrstični
          komentar
      */
      #+END_SRC

    - include "imedatoteke.php";

      Include vključi (požene) kodo iz poljubne datoteke
** Podatkovne strukture
*** Skalarni tip (spremenljvika z eno vrednostjo)

     #+BEGIN_SRC php
     $spremenljivka = "vrednost";
     #+END_SRC

     #+BEGIN_SRC php
     echo($spremenljivka); // "vrednost"
     #+END_SRC

**** Tipi skalarjev
      - Besedilo (string)

        #+BEGIN_SRC php
        'Dobeseden tekst', "Tekst s spremenljivko: $stevilo"
        #+END_SRC

      - Število (integer) - celo število

        #+BEGIN_SRC php
        0, 42, -123 ...
        #+END_SRC

      - Decimalno število (float)

        #+BEGIN_SRC php
        0.5, -12.952 ...
        #+END_SRC

      - Binarna vrednost (boolean)

        #+BEGIN_SRC php
        true / false
        #+END_SRC

      - Ničelna vrednost

        #+BEGIN_SRC php
        null
        #+END_SRC
        
      - V skalar lahko tudi shranimo funkcijo

        #+BEGIN_SRC php
        $opravilo = function() {
            izvedi;
        }
        $opravilo();
        #+END_SRC
*** Konstante
     - nespremenljive

       #+BEGIN_SRC php
       define("IMEKONSTANTE", vrednost);
       echo(IMEKONSTANTE); // vrednost
       #+END_SRC
*** Polje (array)
    - Vsebuje zaporeden seznam vrednosti kateregakoli tipa (kot pri skalarjih)
    - Dostop do elementov z zaporednim številom, začenši z 0

      #+BEGIN_SRC php
      $polje = [1, "dva", 3];
      echo($polje[1]); // 1
      echo($polje[2]); // "dva"
      #+END_SRC
**** Asociativno polje (associative array)
    - Seznam vrednosti, indeksiran z vrednostmi kateregakoli tipa

      #+BEGIN_SRC php
      $asociativno_polje = [
            "kljuc" => "vrednost!",
            1001 => true
      ];
      echo($asociativno_polje["kljuc"]); // "vrednost!"
      echo($asociativno_polje[1001]); // true
      #+END_SRC

** Kontrolne strukture
*** If stavki
     #+BEGIN_SRC php
     if (pogoj) posledica else drugaposledica;
     #+END_SRC

     #+BEGIN_SRC php
     if (pogoj) {
         posledica;
     } elseif (drugpogoj) {
         drugaposledica;
     } else {
         nekajtretjega;
     }
     #+END_SRC

     #+BEGIN_SRC php
     if (pogoj):
         razne;
         stvari;
     else:
         drugo;
     endif;
     #+END_SRC

*** While zanke
     #+BEGIN_SRC php
     while (pogoj) {
         ponavljaj;
     }
     #+END_SRC
     
     #+BEGIN_SRC php
     do {
         ponavljaj;
     } while (pogoj);
     #+END_SRC

     #+BEGIN_SRC php
     while (pogoj):
         ponavljaj;
     endwhile;
     #+END_SRC

*** For zanke
     #+BEGIN_SRC php
     for ($i = 0; $i < 3; $i++) {
         ponovi;     // Ponovi 3x
     }
     #+END_SRC

     #+BEGIN_SRC php
     $stevec = [1, 2, 3, 4];
     foreach ($stevec as $stevilo) {
         echo("$stevilo!\n");
     }
     #+END_SRC

     #+BEGIN_SRC php
     $polje = [
         "kljuc" => "vrednost",
         "drugo" => "tretje"
     ];
     foreach ($polje as $kljuc => $vrednost) {
         echo("vrednost " . $kljuc . ": " . $vrednost . "\n");
     }
     #+END_SRC

** Funkcije
     #+BEGIN_SRC php
     function imeFunkcije ($argument, &$referencniArgument) {
         telo_funkcije;
         $vrednost = "primer";
         return $vrednost;
     }
     #+END_SRC

     #+BEGIN_SRC php
     function sestej ($prvo, $drugo) {
         return $prvo + $drugo + 2;
     }
     sestej(2, 3); // Vrne 7
     #+END_SRC

** Seznam php funkcij
 - die();

* SMF
** Spremenljivke

    [[http://wiki.simplemachines.org/smf/Global_variables][SMF variable]]

    - ~$context~ (predmeti/spremenljivke za v predlogo)
    - ~$txt~ (prevodi)
    - ~$scripturl~
    - ~$settings~ (globalne nastavitve teme)
    - ~$sourcedir~ (absolutna pot do mape Sources)
    - ~$smcFunc~ (Funkcije)
      
** Seznam SMF funkcij

    [[http://dev.simplemachines.org/smcfunctions.php][SMF Funkcije]]

    Primer klica:
    ~$smcFunc['arugment'](parameter odvisen od arugmenta)~

    Argumenti za poizvedbe v bazo:
    - ~db_query~ (SQL poizvedba) - poizvedba v bazo ~SELECT~, ~SELECT COUNT()~, ~INSERT~, ~UPDATE~, ~DELETE~
      primer: 
      #+NAME: db_query
      #+BEGIN_SRC php 
     $request = $smcFunc['db_query']('', '
            SELECT id_proj FROM {db_prefix}tasks
            WHERE id = {int:id_task}', array('id_task' => $id_task) );
      #+END_SRC
    - ~db_insert~ (SQL poizvedba)
    - ~db_fetch_assoc~ (~$request~)
      primer:
      #+NAME: db_fetch_assoc
      #+BEGIN_SRC php 
     $row = $smcFunc['db_fetch_assoc']($request);
      #+END_SRC
    - ~db_free_results~ (~$request~) - narediš kar tako, da sprostiš nek spomin, al kaj
    - ~html_specialchars~ - (~string~) zaščita pred SQL injekcijami
    - ~html_trim~ - (~string~) zaščita pred SQL injekcijami

    Ostale funckije:
     - ~checkSession()~ - preveri, če je uporabnik pravi

** Struktura Moda

    datoteke:
    - ~package-info.xml~
    - ~modification.xml~
    - ~database.php~
    - ~Delegator.php~
    - ~Delegator.template.php~
    - ~delegator_helpers.php~    
    - ~delegator.js~
    - ~moment.min.js~
    - ~pikaday.css~    
    - ~pikaday.jquery.js~
    - ~pikaday.js~    

*** Povezave
     - [[http://www.simplemachines.org/community/index.php?topic=299670.0][modification.xml]]
     - [[http://www.simplemachines.org/community/index.php?topic=299669.0][package-info.xml]] 
     - [[http://wiki.simplemachines.org/smf/Coding_Guidelines][Smernice programiranja]]
     - [[http://wiki.simplemachines.org/smf/Customization_approval_guidelines][Smernice za kostumizacijo]]
